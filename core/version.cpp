// Copyright (c) 2005, Niels Martin Hansen
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//   * Neither the name of the Aegisub Group nor the names of its contributors
//     may be used to endorse or promote products derived from this software
//     without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// -----------------------------------------------------------------------------
//
// AEGISUB
//
// Website: http://aegisub.cellosoft.com
// Contact: mailto:jiifurusu@gmail.com
//

#include <wx/string.h>
#include <wx/datetime.h>
#include "version.h"

// This include is generated by build/make-svn-rev-header.py
// That script should be run before every build is initiated
#include "build/svn-revision.h"

// Either create a build/build-credit.h file defining BUILD_CREDIT,
// or define it during compilation of this file
#ifndef BUILD_CREDIT
#include "build/build-credit.h"
#endif

// If the BUILD_SVN_REVISION happens to be zero or less, the build is assumed to be a public-release build (ie. not prerel)
// So manually edit build/svn-revision.h to match that, when doing such a build, or add some other magic to do that.

struct VersionInfoStruct {
	// Some raw data
	wxChar *VersionNumber;
	bool IsDebug;
	int SvnRev;
	wxChar *BuildTime;
	wxChar *BuildCredit;

	// Nice strings for display
	wxString LongVersionString;
	wxString ShortVersionString;

	// Generate the above data
	VersionInfoStruct() {
		// Update this whenever a new version is release
		VersionNumber = _T("v1.10");
#ifdef _DEBUG
		IsDebug = true;
#else
		IsDebug = false;
#endif
		SvnRev = BUILD_SVN_REVISION;
		BuildTime = _T(BUILD_TIMESTAMP);
		BuildCredit = _T(BUILD_CREDIT);

		if (IsDebug && SvnRev > 0) {
			LongVersionString = wxString::Format(_T("%s PRE-RELEASE (debug, svn %d, %s)"), VersionNumber, SvnRev, BuildCredit);
			ShortVersionString = wxString::Format(_T("%s svn %d debug"), VersionNumber, SvnRev);

		} else if (IsDebug && SvnRev <= 0) {
			LongVersionString = wxString::Format(_T("%s beta (debug, %s)"), VersionNumber, BuildCredit);
			ShortVersionString = wxString::Format(_T("%s beta debug"), VersionNumber);

		} else if (SvnRev > 0) {
			LongVersionString = wxString::Format(_T("%s PRE-RELEASE (svn %d, %s)"), VersionNumber, SvnRev, BuildCredit);
			ShortVersionString = wxString::Format(_T("%s svn %d PRE-RELEASE"), VersionNumber, SvnRev);

		} else {
			ShortVersionString = LongVersionString = wxString::Format(_T("%s beta"), VersionNumber);
		}
	}
};


VersionInfoStruct versioninfo;


wxString GetAegisubLongVersionString() {
	return versioninfo.LongVersionString;
}

wxString GetAegisubShortVersionString() {
	return versioninfo.ShortVersionString;
}

wxString GetAegisubBuildTime() {
	return versioninfo.BuildTime;
}

wxString GetAegisubBuildCredit() {
	return versioninfo.BuildCredit;
}
